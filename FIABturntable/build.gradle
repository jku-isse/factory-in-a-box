plugins {
    id 'java'
    id 'application'
    //id "com.github.johnrengelman.shadow" version "7.1.0"
}

group 'fiab.isse'
version '1.1.0'

akkaTarget = '2.12' //Change to 2.13 if possible. This is the scala version
akkaVersion = '2.6.17'

repositories {
    maven { url "https://jitpack.io" }
    mavenCentral()
}

dependencies {
    implementation "com.github.oxo42:stateless4j:2.5.0"
    implementation "com.fasterxml.jackson.core:jackson-databind:2.9.9"
    implementation "com.typesafe.akka:akka-actor_${akkaTarget}:${akkaVersion}"
    implementation "com.typesafe.akka:akka-slf4j_${akkaTarget}:${akkaVersion}"

    implementation project(":FIABcore")
    implementation project(":FIABopcuabase")
    implementation project(":FIABfunctionalunit")
    implementation project(":FIABhandshake")
    implementation project(":FIABconveyor")
    implementation project(":FIABhal")

    testImplementation testFixtures(project(":FIABfunctionalunit"))
    testImplementation "com.typesafe.akka:akka-testkit_${akkaTarget}:${akkaVersion}"
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
}

test {
    //useJUnitPlatform()
    useJUnitPlatform {
        excludeTags("SystemTest")
    }
}

tasks.register("runUnitTests", Test) {
    useJUnitPlatform {
        includeTags "UnitTest"
    }
    mustRunAfter check
}

//Some tests need to be re-run manually, since I can't get rid of BindException for now
tasks.register("runIntegrationTests", Test) {
    useJUnitPlatform {
        includeTags "IntegrationTest"
    }
    mustRunAfter check
}

tasks.register("runSystemTests", Test) {
    useJUnitPlatform {
        includeTags "SystemTest"
    }
    mustRunAfter check
}

jar {
    manifest {
        attributes 'Main-Class': 'TurntableApplication'
    }
    //from {
    //    configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    //}
}

task fatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'TurntableApplication'
    }
    archiveClassifier = "all"
    duplicatesStrategy "include"
    exclude 'META-INF/*.RSA'
    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
    from {
        configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
}

application {
    mainClass = 'TurntableApplication'
}